---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lun.
--- DateTime: 2/21/2022 12:07 AM
---
local font = render.create_font( "Tahoma", 12, 400, e_font_flags.DROPSHADOW )

local enabled = menu.add_checkbox( "on shot indicator", "enabled" )
local color = enabled:add_color_picker( "indicator_color" )
local always_show = menu.add_checkbox( "on shot indicator", "always show" )
local show_text = menu.add_checkbox( "on shot indicator", "show text" )

local hide_shots = menu.find( "aimbot", "general", "exploits", "hideshots", "enable" )

-- todo: maybe some way to check if the resolution changed? IVEngineClient::GetScreenAspectRatio maybe.
local screen_size = render.get_screen_size( )
local max_backtrack_time = 400
local last_shot_time = -1
local local_player = nil
local cur_time = -1

local function map_var( value, min, max )
    return ( value - min ) / ( max - min )
end

local function on_paint( )
    local_player = entity_list.get_local_player( )

    if not enabled:get( ) or not local_player then
        last_shot_time = -1
        return
    end

    cur_time = global_vars.cur_time( )

    delta = cur_time - last_shot_time

    ms_since_last_shot = delta * 1000

    -- clamp it to max backtrack
    if ms_since_last_shot > max_backtrack_time then
        ms_since_last_shot = max_backtrack_time

        if not always_show:get( ) then
            return
        end
    end

    indicator_size = vec2_t(screen_size.x * 0.2, 6 )
    indicator_pos = vec2_t( ( screen_size.x * 0.5 ) - indicator_size.x * 0.5, screen_size.y - 30 )

    -- map our var
    fill = map_var( ms_since_last_shot, 0, max_backtrack_time ) * indicator_size.x

    -- render the indicator
    render.rect_filled( indicator_pos, indicator_size, color_t( 45, 45, 45 ), 3 )

    -- fill
    render.rect_filled( indicator_pos, vec2_t( fill, indicator_size.y ),  color:get( ), 3 )

    -- outline
    render.rect( vec2_t( indicator_pos.x - 1, indicator_pos.y - 1 ), vec2_t( indicator_size.x + 1, indicator_size.y + 1 ), color_t( 15, 15, 15 ), 3 )

    if show_text:get( ) then
        -- we have remaining time, show it
        if ms_since_last_shot ~= max_backtrack_time then
            text = "onshot (" .. math.floor( math.abs( ms_since_last_shot - max_backtrack_time ) ) .. ") ms"
        else
            text = "onshot"
        end

        text_size = render.get_text_size( font, text )


        render.text( font, text, vec2_t( indicator_pos.x + ( ( indicator_size.x * 0.5 ) - ( text_size.x * 0.5 ) ), indicator_pos.y - 15 ), color_t( 255, 255, 255 ) )
    end
end

local function on_event( event )
    player = entity_list.get_player_from_userid( event.userid )

    if not player or not local_player or player ~= local_player then
        return
    end

    if not hide_shots[ 2 ]:get( ) then
        last_shot_time = cur_time
    end
end

callbacks.add( e_callbacks.PAINT, on_paint )
callbacks.add( e_callbacks.EVENT, on_event, "weapon_fire" )