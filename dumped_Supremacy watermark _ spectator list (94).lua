---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lun.
--- DateTime: 2/22/2022 1:22 AM
---
---

local watermark_font = render.create_font( "Tahoma", 16, 400, e_font_flags.ANTIALIAS )
local spectator_font = render.create_font( "Tahoma", 12, 400, e_font_flags.DROPSHADOW )

local local_player = nil
local screen_size = render.get_screen_size( )

function get_table_length( table )
    length = 0

    for _ in pairs( table ) do
        length = length + 1
    end

    return length
end

local function watermark( )
    ping = math.floor( engine.get_latency( e_latency_flows.OUTGOING ) * 1000 )
    tick_rate = math.floor( 1 / global_vars.interval_per_tick( ) )

    text = "supremacy | rtt: " .. ping .. "ms | rate: " .. tick_rate .. " "

    text_size = render.get_text_size( watermark_font, text )

    render.rect_filled( vec2_t( screen_size.x - text_size.x - 20, 10 ), vec2_t( text_size.x + 10, text_size.y + 2 ), color_t( 240, 110, 140, 150 ) )

    render.text( watermark_font, text, vec2_t( screen_size.x - 15  - text_size.x, 10 ), color_t( 240, 160, 180 ) )
end

local function spectator_list( )
    spectators_size = render.get_text_size( spectator_font, "spectators" )

    spectators = { "spectators" }
    cur_spec_index = 2

    -- iterate through all players
    for _, player in pairs( entity_list.get_players( ) ) do
        if player:is_alive( ) or player:is_dormant( ) then
            goto continue
        end

        observer_target = entity_list.get_entity( player:get_prop( "m_hObserverTarget" ) )

        if observer_target ~= local_player then
            goto continue
        end

        spectators[ cur_spec_index ] = player:get_name( )

        -- go to the next index
        cur_spec_index = cur_spec_index + 1

        ::continue::
    end

    height = 11 * get_table_length( spectators )

    -- go through all our spectators
    for i, spectator in pairs( spectators ) do
        spectator_size = render.get_text_size( spectator_font, spectator )

        spectator_pos = vec2_t(
                screen_size.x - 20 - spectator_size.x,
                ( ( screen_size.y * 0.5 ) - ( height * 0.5 ) ) + ( i * 11 ) -- center it relative to the center.
        )

        render.text( spectator_font, spectator, spectator_pos, color_t( 255, 255, 255 ) )
    end
end

local function on_paint( )
    local_player = entity_list.get_local_player( )

    if not local_player then
        return
    end

    watermark( )
    spectator_list( )
end

local function on_watermark( )
    return
end

callbacks.add( e_callbacks.PAINT, on_paint )
callbacks.add( e_callbacks.DRAW_WATERMARK, on_watermark )